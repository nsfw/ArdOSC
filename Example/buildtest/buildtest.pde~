// notes for newlibc
// ~/Documents/chipKIT/libraries/chipKITEthernet/utility/TCPIP Stack/Helpers.h
// #define _C32_ULTOA 1
//
// in WCharacter.h: isblank(int c) definition conflicts w/ ctype.h
//

// #include "exceptions.h"
#include <SPI.h>
// #include <Ethernet.h>
#include <chipKITEthernet.h>

#include <ArdOSC.h>

// byte myMac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
byte myMac[] = { 0, 0, 0, 0, 0, 0 };	// let ethernet library assign something
byte myIp[]  = { 139, 104, 88, 199 };

byte targetIp[]  = { 139, 104, 88, 90 };


int  serverPort  = 9999;

int destPort=9999;

char oscadr[]="/test";

OSCServer server;
OSCClient client;

char blockingReadChar(){
    while(!Serial.available());	// wait for it
    return Serial.read();
}

void dumpMem(){
    int dummy;
    uint32_t diff = 0;
    Serial.println("Mem:");
    void *p = malloc(4);
    if(p){
        Serial.println((unsigned int)&dummy,HEX);
        Serial.println((unsigned int)p, HEX);
        Serial.print("stack/heap diff: ");
        Serial.println((unsigned int) &dummy - (unsigned int) p, HEX);
    } else {
        Serial.println("UNABLE TO ALLOCATE 4 BYTES!");
    }
}

void testAlloc(){
    int p = 0;
    while(malloc(0x100)){
        p+=0x100;
        Serial.print("alloc: ");
        Serial.println(p, HEX);
        dumpMem();
    }
}

// extern size_t _min_heap_size;
// extern unsigned int __heap_start;

void setup(){ 
  
    Serial.begin(57600);
    Serial.println("Hello!");
    // Serial.println(_min_heap_size);
    // Serial.println(__heap_start,HEX);

    testAlloc();

    Ethernet.begin(myMac ,myIp); 
    server.begin(serverPort);
 
    //set callback function
    server.addCallback(oscadr,&func1);
    dumpMem();
}
  
void loop(){
//    TRY {
        Ethernet.PeriodicTasks();
        if(server.availableCheck()>0){
            Serial.println("alive! "); 
        }
        // Serial.println("a");
        // makeMsg();	// and send
        // Serial.println("b");
        // delay(1000);
    // } CATCH {
    //   Serial.println("## EXCEPTION ############################################");
    //   if (_excep_code == EXCEP_Trap) {
    //       Serial.print("Trap exception: ");
    //   } else if (_excep_code == EXCEP_DBE) {
    //       Serial.print("Bus error (load/store) exception: ");
    //   } else {
    //       Serial.print("Unknown exception: ");
    //   }
    //   Serial.print(_excep_code);
    //   Serial.println();
    //   Serial.println("#######################################################");
    // }
}

// /test + nothing = /test\0\0\0,\0\0\0\0 = 12 

int cnt = 0;
void makeMsg(){
  //create new osc message
  OSCMessage newMes;
  
  //set destination ip address & port no
  newMes.setAddress(targetIp,destPort);
  
  //set argument
  newMes.beginMessage(oscadr);
  // newMes.addArgInt32(cnt);
  // newMes.addArgFloat(0.1*cnt);
  // newMes.addArgString("HLEOEOEOEO!");

  Serial.println("s");
  //send osc message
  Serial.print("addrlen: "); Serial.println(newMes._oscAdrAlignmentSize);
  Serial.print("typelen: "); Serial.println(newMes._typeTagAlignmentSize);
  client.send(&newMes);
  Serial.println("!");
  cnt++;
  // chipkit32 will fault on free(0)
  // if(cnt == 10){
  //     Serial.println("BANG?");
  //     free((void*) 0);
  // }
}

void func1(OSCMessage *_mes){
  
    logIp(_mes);
    logOscAddress(_mes);
  
    //get source ip address
    byte *sourceIp = _mes->getIpAddress();

    //get 1st argument(int32)
    int tmpI=_mes->getArgInt32(0);
  
    //get 2nd argument(float)
    float tmpF=_mes->getArgFloat(1);
  
    //get 3rd argument(string)
    int strSize=_mes->getArgStringSize(2);
    char tmpStr[strSize]; //string memory allocation
    _mes->getArgString(2,tmpStr); 


  //create new osc message
  OSCMessage newMes;
  
  //set destination ip address & port no
  newMes.setAddress(sourceIp,destPort);
  
  //set argument
  newMes.beginMessage(oscadr);
  newMes.addArgInt32(tmpI+1);
  newMes.addArgFloat(tmpF+0.1);
  newMes.addArgString(tmpStr);
 
  //send osc message
  client.send(&newMes);
}




void logIp(OSCMessage *_mes){
  byte *ip = _mes->getIpAddress();
  Serial.print("IP:");
  Serial.print(ip[0],DEC);
  Serial.print(".");
  Serial.print(ip[1],DEC);
  Serial.print(".");
  Serial.print(ip[2],DEC);
  Serial.print(".");
  Serial.print(ip[3],DEC);
  Serial.print(" ");
}

void logOscAddress(OSCMessage *_mes){
  Serial.println(_mes->getOSCAddress());
} 

